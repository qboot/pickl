<?php

namespace Pickl\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function findWithAllDependencies($id) {
        $qb = $this->createQueryBuilder('u');

        $qb
            ->where('u.id = :id')
                ->setParameter('id',$id)
            ->leftJoin('u.projects','p')
                ->addSelect('p')
            ->leftJoin('u.comments','c')
                ->addSelect('c')
            ->leftJoin('u.favorites','f')
                ->addSelect('f')
            ->leftJoin('u.contributions','cont')
                ->addSelect('cont')
            ->leftJoin('u.rewards','r')
                ->addSelect('r')
            ->leftJoin('r.reward','rew')
                ->addSelect('rew')
            ->orderBy('u.username','ASC')
        ;

        return $qb
            ->getQuery()
            ->getOneOrNullResult()
            ;
    }

    public function findWithUsername($username) {
        $qb = $this->createQueryBuilder('u');

        return $qb
            ->where('u.username = :username')
                ->setParameter('username', $username)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findAllUsers($page, $nbPerPage)
    {
        $qb = $this->createQueryBuilder('u');

        $query = $qb
            ->where($qb->expr()->not('u.roles like :role'))
                ->setParameter('role', '%ADMIN%')
            ->orderBy('u.username','ASC')
        ;

        $query
            ->setFirstResult(($page-1)*$nbPerPage)
            ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    public function findAllUsersOrderByXp()
    {
        $qb = $this->createQueryBuilder('u');

        $qb
            ->orderBy('u.experience','DESC')
        ;

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function findAllAdmins()
    {
        $qb = $this->createQueryBuilder('u');

        $qb
            ->where('u.roles like :role')
                ->setParameter('role', '%ADMIN%')
            ;

        $qb
            ->orderBy('u.username','ASC')
            ;

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findRecentsUsers($limit)
    {
        $qb = $this->createQueryBuilder('u');

        $qb
            ->orderBy('u.registrationDate','DESC')
            ->setMaxResults($limit)
        ;

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }
}
