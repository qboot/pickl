<?php

namespace Pickl\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends EntityRepository
{
    public function findAllProjectsWithLimit($limit)
    {
        $qb = $this->createQueryBuilder('p');

        $qb
            ->where('p.published = :published')
                ->setParameter('published', true)
            ->orderBy('p.startingDate', 'DESC')
            ->setMaxResults($limit)
        ;

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function findProjectsOfUser($username, $page, $nbPerPage)
    {
        $qb = $this->createQueryBuilder('p');

        $query = $qb
            ->leftJoin('p.user', 'u')
                ->addSelect('u')
            ->where('u.username = :username')
                ->setParameter('username', $username)
            ->orderBy('p.startingDate', 'DESC');

        $query
            ->setFirstResult(($page - 1) * $nbPerPage)
            ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    public function findProjectsOfUserWithLimit($username, $limit)
    {
        $qb = $this->createQueryBuilder('p');

        $qb
            ->leftJoin('p.user', 'u')
            ->addSelect('u')
            ->where('u.username = :username')
            ->setParameter('username', $username)
            ->orderBy('p.startingDate', 'DESC')
            ->setMaxResults($limit)
            ;

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function findWithSlug($slug)
    {
        $qb = $this->createQueryBuilder('p');

        $qb
            ->where('p.slug = :slug')
                ->setParameter('slug',$slug)
            ->leftJoin('p.tags', 'tags')
                ->addSelect('tags')
            ->leftJoin('p.user', 'user')
                ->addSelect('user')
            ->leftJoin('p.contributions','cont')
                ->addSelect('cont')
            ->leftJoin('p.counterparts','co')
                ->addSelect('co')
            ->leftJoin('user.rank', 'rank')
                ->addSelect('rank')
            ->leftJoin('p.picture', 'img')
                ->addSelect('img')
            ->orderBy('co.minAmount','ASC')
            ;

        return $qb
            ->getQuery()
            ->getOneOrNullResult()
            ;
    }

    public function findAllPublishedWithRelations()
    {
        return $this
            ->createQueryBuilder('p')
                ->where('p.published = :published')
                    ->setParameter('published', true)
                ->leftJoin('p.tags', 'tags')
                    ->addSelect('tags')
                ->leftJoin('p.user', 'user')
                    ->addSelect('user')
                ->leftJoin('p.contributions','cont')
                    ->addSelect('cont')
                ->leftJoin('user.rank', 'rank')
                    ->addSelect('rank')
            ->getQuery()
            ->getResult()
            ;


    }

    public function findAllProjects($page, $nbPerPage)
    {
        $qb = $this->createQueryBuilder('p');

        $query = $qb
                ->leftJoin('p.user', 'user')
                    ->addSelect('user')
                ->orderBy('p.startingDate','DESC')
                ;

        $query
            ->setFirstResult(($page-1)*$nbPerPage)
            ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    public function searchWithArg($arg)
    {
        $qb = $this->createQueryBuilder('p');

        $qb
            ->where('p.title like :title')
                ->setParameter('title', '%'.$arg.'%')
            ->orWhere('p.smallDescription like :sd')
                ->setParameter('sd', '%'.$arg.'%')
            ->orWhere('p.bigDescription like :bd')
                ->setParameter('bd', '%'.$arg.'%')
            ->leftJoin('p.tags', 't')
                ->addSelect('t')
            ->orWhere('t.word like :word')
                ->setParameter('word', '%'.$arg.'%')
            ->andWhere('p.published = :publi')
                ->setParameter('publi',true)
        ;

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findAllProjectsWithCategory($categorySlug, $page, $nbPerPage)
    {
        $qb = $this->createQueryBuilder('p');

        $query = $qb
            ->leftJoin('p.category','c')
                ->addSelect('c')
            ->where('c.slug = :slug')
                ->setParameter('slug',$categorySlug)
            ->orderBy('p.startingDate','DESC')
        ;

        $query
            ->setFirstResult(($page-1)*$nbPerPage)
            ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    public function findThreeLast()
    {
        $qb = $this->createQueryBuilder('p');

        $qb
            ->where('p.published = :published')
            ->setParameter('published', true)
            ->orderBy('p.startingDate', 'DESC')
            ->setMaxResults(3)
            ;

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function findRecentsProjects($limit)
    {
        $qb = $this->createQueryBuilder('p');

        $qb
            ->orderBy('p.startingDate','DESC')
            ->setMaxResults($limit)
        ;

        return $qb
            ->where('p.published = :published')
            ->setParameter('published', true)
            ->getQuery()
            ->getResult()
            ;
    }

}
