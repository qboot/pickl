<?php

namespace Pickl\AppBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Project
 *
 * @ORM\Table(name="project")
 * @ORM\Entity(repositoryClass="Pickl\AppBundle\Repository\ProjectRepository")
 * @ORM\HasLifecycleCallbacks()
 */
class Project
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="title", type="string", length=255)
     * @Assert\Length(min=10, minMessage="This value is too short. It should have {{ limit }}")
     * @Assert\Length(max=30, maxMessage="This value is too long. It should have {{ limit }}")
     * @Assert\Type(type="string", message="This value is should be a valid string")
     * @Assert\NotBlank()
     */
    private $title;

    /**
     * @var int
     *
     * @ORM\Column(name="requested_amount", type="integer")
     * @Assert\NotBlank()
     * @Assert\Type(type="integer", message="The value {{ value }} should be a valid number")
     * @Assert\Range(
     *     min = 100,
     *     minMessage = "You must request at least ${{ limit }}"
     * )
     */
    private $requestedAmount = 0;

    /**
     * @var int
     *
     * @ORM\Column(name="collected_amount", type="integer")
     */
    private $collectedAmount = 0;

    /**
     * @var string
     *
     * @ORM\Column(name="small_description", type="string", length=255)
     * @Assert\Length(min=25, minMessage="This value is too short. It should have {{ limit }}")
     * @Assert\Length(max=255, maxMessage="This value is too long. It should have {{ limit }}")
     * @Assert\Type(type="string", message="This value should be a valid string")
     * @Assert\NotBlank()
     */
    private $smallDescription;

    /**
     * @var string
     *
     * @ORM\Column(name="big_description", type="text")
     * @Assert\Length(min=50, minMessage="This value is too short. It should have {{ limit }}")
     * @Assert\Length(max=1500, maxMessage="This value is too long. It should have {{ limit }}")
     * @Assert\Type(type="string", message="This value should be a valid string")
     * @Assert\NotBlank()
     */
    private $bigDescription;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="starting_date", type="datetime")
     */
    private $startingDate;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="ending_date", type="datetime")
     */
    private $endingDate;

    /**
     * @var bool
     *
     * @ORM\Column(name="validated", type="boolean")
     */
    private $validated = true;

    /**
     * @var int
     *
     * @ORM\Column(name="reported", type="integer", nullable=true)
     */
    private $reported;

    /**
     * @var bool
     *
     * @ORM\Column(name="published", type="boolean")
     * @Assert\Type(type="bool", message="This value should be a boolean")
     */
    private $published = false;

    /**
     * @var bool
     *
     * @ORM\Column(name="finished", type="boolean")
     */
    private $finished = false;

    /**
     * @var string
     *
     * @ORM\Column(name="country", type="string", length=255)
     * @Assert\Country
     */
    private $country;

    /**
     * @var bool
     *
     * @ORM\Column(name="daily_project", type="boolean", nullable=true)
     */
    private $dailyProject;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="daily_project_date", type="datetime", nullable=true)
     */
    private $dailyProjectDate;

    /**
     * @Gedmo\Slug(fields={"title"})
     * @ORM\Column(name="slug", type="string", length=255, unique=true)
     */
    private $slug;

    /**
     * @ORM\OneToOne(targetEntity="Pickl\AppBundle\Entity\Image", cascade={"persist"})
     * @ORM\JoinColumn(nullable=false)
     */
    private $picture;

    /**
     * @ORM\ManyToOne(targetEntity="Pickl\AppBundle\Entity\User", cascade={"persist"}, inversedBy="projects")
     * @ORM\JoinColumn(nullable=false)
     */
    private $user;

    /**
     * @ORM\ManyToOne(targetEntity="Pickl\AppBundle\Entity\Category", cascade={"persist"}, inversedBy="projects")
     * @ORM\JoinColumn(nullable=false)
     */
    private $category;

    /**
     * @ORM\ManyToMany(targetEntity="Pickl\AppBundle\Entity\Tag", cascade={"persist"}, inversedBy="projects")
     */
    private $tags;

    /**
     * @ORM\OneToMany(targetEntity="Pickl\AppBundle\Entity\Contribution", cascade={"remove"}, mappedBy="project")
     */
    private $contributions;

    /**
     * @ORM\OneToMany(targetEntity="Pickl\AppBundle\Entity\Comment", cascade={"remove"}, mappedBy="project")
     */
    private $comments;

    /**
     * @ORM\OneToMany(targetEntity="Pickl\AppBundle\Entity\Favorite", cascade={"remove"}, mappedBy="project")
     */
    private $favorites;

    /**
     * @ORM\OneToMany(targetEntity="Pickl\AppBundle\Entity\Counterpart", cascade={"persist"}, mappedBy="project")
     * @Assert\Valid
     */
    private $counterparts;

    /**
     * @ORM\OneToMany(targetEntity="Pickl\AppBundle\Entity\News", cascade={"remove"}, mappedBy="project")
     */
    private $news;

    private $duration;


    /**
     * @ORM\PrePersist
     */
    public function hydrateEndingDate()
    {
        if(!empty($this->duration))
            $this->endingDate->modify('+'.$this->duration.' days');
    }

    public function getDuration()
    {
        return $this->duration;
    }

    public function setDuration($duration)
    {
        $this->duration = $duration;
        return $duration;
    }

    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set title
     *
     * @param string $title
     *
     * @return string
     */
    public function setTitle($title)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Get title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set requestedAmount
     *
     * @param integer $requestedAmount
     *
     * @return int
     */
    public function setRequestedAmount($requestedAmount)
    {
        $this->requestedAmount = $requestedAmount;

        return $this;
    }

    /**
     * Get requestedAmount
     *
     * @return int
     */
    public function getRequestedAmount()
    {
        return $this->requestedAmount;
    }

    /**
     * Set smallDescription
     *
     * @param string $smallDescription
     *
     * @return string
     */
    public function setSmallDescription($smallDescription)
    {
        $this->smallDescription = $smallDescription;

        return $this;
    }

    /**
     * Get smallDescription
     *
     * @return string
     */
    public function getSmallDescription()
    {
        return $this->smallDescription;
    }

    /**
     * Set bigDescription
     *
     * @param string $bigDescription
     *
     * @return string
     */
    public function setBigDescription($bigDescription)
    {
        $this->bigDescription = $bigDescription;

        return $this;
    }

    /**
     * Get bigDescription
     *
     * @return string
     */
    public function getBigDescription()
    {
        return $this->bigDescription;
    }

    /**
     * Set startingDate
     *
     * @param \DateTime $startingDate
     *
     * @return \DateTime
     */
    public function setStartingDate($startingDate)
    {
        $this->startingDate = $startingDate;

        return $this;
    }

    /**
     * Get startingDate
     *
     * @return \DateTime
     */
    public function getStartingDate()
    {
        return $this->startingDate;
    }

    /**
     * Set endingDate
     *
     * @param \DateTime $endingDate
     *
     * @return \DateTime
     */
    public function setEndingDate($endingDate)
    {
        $this->endingDate = $endingDate;

        return $this;
    }

    /**
     * Get endingDate
     *
     * @return \DateTime
     */
    public function getEndingDate()
    {
        return $this->endingDate;
    }

    /**
     * Set validated
     *
     * @param boolean $validated
     *
     * @return bool
     */
    public function setValidated($validated)
    {
        $this->validated = $validated;

        return $this;
    }

    /**
     * Get validated
     *
     * @return bool
     */
    public function getValidated()
    {
        return $this->validated;
    }

    /**
     * Set reported
     *
     * @param integer $reported
     *
     * @return int
     */
    public function setReported($reported)
    {
        $this->reported = $reported;

        return $this;
    }

    /**
     * Get reported
     *
     * @return int
     */
    public function getReported()
    {
        return $this->reported;
    }

    /**
     * Set published
     *
     * @param boolean $published
     *
     * @return bool
     */
    public function setPublished($published)
    {
        $this->published = $published;

        return $this;
    }

    /**
     * Get published
     *
     * @return bool
     */
    public function getPublished()
    {
        return $this->published;
    }

    /**
     * Set finished
     *
     * @param boolean $finished
     *
     * @return bool
     */
    public function setFinished($finished)
    {
        $this->finished = $finished;

        return $this;
    }

    /**
     * Get finished
     *
     * @return bool
     */
    public function getFinished()
    {
        return $this->finished;
    }

    /**
     * Set country
     *
     * @param string $country
     *
     * @return string
     */
    public function setCountry($country)
    {
        $this->country = $country;

        return $this;
    }

    /**
     * Get country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->country;
    }

    /**
     * Set dailyProject
     *
     * @param boolean $dailyProject
     *
     * @return bool
     */
    public function setDailyProject($dailyProject)
    {
        $this->dailyProject = $dailyProject;

        return $this;
    }

    /**
     * Get dailyProject
     *
     * @return bool
     */
    public function getDailyProject()
    {
        return $this->dailyProject;
    }

    /**
     * Set dailyProjectDate
     *
     * @param \DateTime $dailyProjectDate
     *
     * @return \DateTime
     */
    public function setDailyProjectDate($dailyProjectDate)
    {
        $this->dailyProjectDate = $dailyProjectDate;

        return $this;
    }

    /**
     * Get dailyProjectDate
     *
     * @return \DateTime
     */
    public function getDailyProjectDate()
    {
        return $this->dailyProjectDate;
    }

    /**
     * Set slug
     *
     * @param string $slug
     *
     * @return string
     */
    public function setSlug($slug)
    {
        $this->slug = $slug;

        return $this;
    }

    /**
     * Get slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->slug;
    }

    /**
     * Set picture
     *
     * @param \Pickl\AppBundle\Entity\Image $picture
     *
     * @return Image
     */
    public function setPicture(Image $picture = null)
    {
        $this->picture = $picture;

        return $this;
    }

    /**
     * Get picture
     *
     * @return \Image
     */
    public function getPicture()
    {
        return $this->picture;
    }

    /**
     * Set user
     *
     * @param \Pickl\AppBundle\Entity\User $user
     *
     * @return User
     */
    public function setUser(User $user)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get user
     *
     * @return User
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Set category
     *
     * @param \Pickl\AppBundle\Entity\Category $category
     *
     * @return Category
     */
    public function setCategory(Category $category)
    {
        $this->category = $category;

        return $this;
    }

    /**
     * Get category
     *
     * @return Category
     */
    public function getCategory()
    {
        return $this->category;
    }
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->tags = new ArrayCollection();
        $this->favorites = new ArrayCollection();
        $this->comments = new ArrayCollection();
        $this->counterparts = new ArrayCollection();
        $this->contributions = new ArrayCollection();

        $this->startingDate = new \Datetime();
        $this->endingDate = new \Datetime();
    }

    /**
     * Get tags
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTags()
    {
        return $this->tags;
    }

    /**
     * Add contribution
     *
     * @param \Pickl\AppBundle\Entity\Contribution $contribution
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function addContribution(Contribution $contribution)
    {
        $this->contributions[] = $contribution;

        return $this;
    }

    /**
     * Remove contribution
     *
     * @param \Pickl\AppBundle\Entity\Contribution $contribution
     */
    public function removeContribution(Contribution $contribution)
    {
        $this->contributions->removeElement($contribution);
    }

    /**
     * Get contributions
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getContributions()
    {
        return $this->contributions;
    }

    /**
     * Add comment
     *
     * @param \Pickl\AppBundle\Entity\Comment $comment
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function addComment(Comment $comment)
    {
        $this->comments[] = $comment;

        return $this;
    }

    /**
     * Remove comment
     *
     * @param \Pickl\AppBundle\Entity\Comment $comment
     */
    public function removeComment(Comment $comment)
    {
        $this->comments->removeElement($comment);
    }

    /**
     * Get comments
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getComments()
    {
        return $this->comments;
    }

    /**
     * Add favorite
     *
     * @param \Pickl\AppBundle\Entity\Favorite $favorite
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function addFavorite(Favorite $favorite)
    {
        $this->favorites[] = $favorite;

        return $this;
    }

    /**
     * Remove favorite
     *
     * @param \Pickl\AppBundle\Entity\Favorite $favorite
     */
    public function removeFavorite(Favorite $favorite)
    {
        $this->favorites->removeElement($favorite);
    }

    /**
     * Get favorites
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getFavorites()
    {
        return $this->favorites;
    }

    /**
     * Add counterpart
     *
     * @param \Pickl\AppBundle\Entity\Counterpart $counterpart
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function addCounterpart(Counterpart $counterpart)
    {
        $this->counterparts[] = $counterpart;

        return $this;
    }

    /**
     * Remove counterpart
     *
     * @param \Pickl\AppBundle\Entity\Counterpart $counterpart
     */
    public function removeCounterpart(Counterpart $counterpart)
    {
        $this->counterparts->removeElement($counterpart);
    }

    /**
     * Get counterparts
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCounterparts()
    {
        return $this->counterparts;
    }

    /**
     * Set collectedAmount
     *
     * @param integer $collectedAmount
     *
     * @return int
     */
    public function setCollectedAmount($collectedAmount)
    {
        $this->collectedAmount = $collectedAmount;

        return $this;
    }

    /**
     * Get collectedAmount
     *
     * @return integer
     */
    public function getCollectedAmount()
    {
        return $this->collectedAmount;
    }

    /**
     * Add tag
     *
     * @param \Pickl\AppBundle\Entity\Tag $tag
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function addTag(Tag $tag)
    {
        $this->tags[] = $tag;

        return $this;
    }

    /**
     * Remove tag
     *
     * @param \Pickl\AppBundle\Entity\Tag $tag
     */
    public function removeTag(Tag $tag)
    {
        $this->tags->removeElement($tag);
    }

    /**
     * Add news
     *
     * @param \Pickl\AppBundle\Entity\News $news
     *
     * @return Project
     */
    public function addNews(News $news)
    {
        $this->news[] = $news;

        return $this;
    }

    /**
     * Remove news
     *
     * @param \Pickl\AppBundle\Entity\News $news
     */
    public function removeNews(News $news)
    {
        $this->news->removeElement($news);
    }

    /**
     * Get news
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getNews()
    {
        return $this->news;
    }

    public function getPercent()
    {
        $req = $this->getRequestedAmount();
        $col = $this->getCollectedAmount();
        $percent = (100 * $col)/$req;
        return floor($percent);
    }

    public function getRemainingTime()
    {
        // si le projet est fini
        if($this->finished)
            return;

        $start = $this->endingDate;
        $end = new \Datetime();

        $interval = $end->diff($start);

        $doPlural = function($nb,$str){return $nb>1?$str.'s':$str;}; // adds plurals

        $format = array();
        if($interval->m >= 2) {
            return $interval->format("%m ".$doPlural($interval->m, "month"));
        }
        if($interval->days !== 0) {
            return $interval->format("%a ".$doPlural($interval->days, "day"));
        }
        if($interval->h !== 0) {
            return $interval->format("%h ".$doPlural($interval->h, "hour"));
        }
        if($interval->i !== 0) {
            return $interval->format("%i ".$doPlural($interval->i, "minute"));
        } else {
            return "Less than a minute";
        }
    }

    public function isOpened()
    {
        return ($this->published && !$this->finished) ? true : false;
    }

    public function getReverseRemainingTime()
    {
        // si le projet est fini
        if($this->finished)
            return;

        $start = $this->startingDate;
        $end = new \Datetime();

        $interval = $start->diff($end);

        $doPlural = function($nb,$str){return $nb>1?$str.'s':$str;}; // adds plurals

        $format = array();
        if($interval == null) {
            return "in the future.";
        }
        if($interval->m >= 2) {
            return $interval->format("%m ".$doPlural($interval->m, "month"));
        }
        if($interval->days !== 0) {
            return $interval->format("%a ".$doPlural($interval->days, "day"));
        }
        if($interval->h !== 0) {
            return $interval->format("%h ".$doPlural($interval->h, "hour"));
        }
        if($interval->i !== 0) {
            return $interval->format("%i ".$doPlural($interval->i, "minute"));
        }  else {
            return "Less than a minute";
        }
    }
}
